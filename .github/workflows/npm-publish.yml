name: Node.js Package

on:
  push

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: lts/*
      - run: yarn

  publish-npm:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: lts/*
          registry-url: https://registry.npmjs.org/

      - name: Get latest version from npm
        id: get_version
        run: |
          # Pega a última versão publicada no npm (se não existir, usa a do package.json)
          LATEST_VERSION=$(npm view . version 2>/dev/null || node -p "require('./package.json').version")
          echo "version=$LATEST_VERSION" >> $GITHUB_OUTPUT

      - name: Generate next pre-release version
        run: |
          CURRENT_VERSION=${{ steps.get_version.outputs.version }}
          
          # Se a versão já tem um pre-release (ex: 1.0.0-3), extrai o número e incrementa
          if [[ "$CURRENT_VERSION" =~ -([0-9]+)$ ]]; then
            NEXT_NUMBER=$(( ${BASH_REMATCH[1]} + 1 ))
            NEW_VERSION="${CURRENT_VERSION%-*}-$NEXT_NUMBER"
          else
            # Se não tem pre-release, adiciona -1 (ex: 1.0.0 → 1.0.0-1)
            NEW_VERSION="$CURRENT_VERSION-1"
          fi
          
          # Atualiza a versão no package.json (sem criar tag Git)
          npm version "$NEW_VERSION" --no-git-tag-version
          echo "New version: $NEW_VERSION"

      - name: Publish to npm
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
